{"version":3,"sources":["../src/index.js"],"names":["argumentsToArray","args","start","end","length","Array","prototype","slice","call","linkReplace","absPath","arguments","settingLink","settingArgs","match","_replaceLink","link","requireIndex","i","settingArg","test","Error","itemArg","setingArg","replace","linkObject","toString","toAbsPath","getLink","Replace","apply","concat","exports","module"],"mappings":"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","file":"index.js","sourcesContent":["const argumentsToArray = function (args, start = 0, end = args.length) {\n  return Array.prototype.slice.call(args, start, end);\n};\n\nconst linkReplace = function () {\n  let absPath = arguments[0];\n  let settingLink = arguments[1];\n  let settingArgs = argumentsToArray(arguments, 2);\n  settingArgs = settingArgs.length ? settingArgs : (settingLink.match(/(:.*?)(?=[\\/\\(]|$)|(\\(\\/:.*?)\\)/ig) || []);\n  const _replaceLink = function (args) {\n    let link = settingLink;\n\n    /*check args*/\n    (() => {\n      let requireIndex = 0;\n      for (let i = 0; i < settingArgs.length; i++) {\n        let settingArg = settingArgs[i];\n        if (settingArg) {\n          if (!(/^\\(.*?\\)$/.test(settingArg))) {\n            requireIndex++;\n          }\n        }\n      }\n      if (args.length < requireIndex) {\n        throw new Error(`${link} URL Args Required`);\n      }\n    })()\n\n    for (let i = 0; i < settingArgs.length; i++) {\n      let itemArg = args[i];\n      let setingArg = settingArgs[i];\n      if (setingArg) {\n        if (/^\\(.*?\\)$/.test(setingArg)) {\n          link = link.replace(setingArg, itemArg ? `/${itemArg}` : '');\n        } else {\n          link = link.replace(setingArg, itemArg || setingArg);\n        }\n      }\n    }\n    return link;\n  };\n\n  let linkObject = function () {\n    return _replaceLink(argumentsToArray(arguments));\n  };\n  linkObject.toString = function () {\n    return _replaceLink(argumentsToArray(arguments));\n  };\n  if (absPath) {\n    linkObject.toAbsPath = function () {\n      return `${absPath}${_replaceLink(argumentsToArray(arguments))}`;\n    };\n  }\n  linkObject.getLink = function () {\n    return settingLink;\n  };\n  return linkObject;\n}\n\nconst Replace = function (link, ...args) {\n  return linkReplace.apply(null, ['', link].concat(args));\n};\nReplace.absPath = function (absPath, link, ...args) {\n  return linkReplace.apply(null, [absPath, link].concat(args));\n}\n\nexports['default'] = Replace;\nmodule.exports = exports['default'];"]}